<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Jiang . &#39;s blog</title>
    <link>https://jfy0o0.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Jiang . &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2021 10:49:45 +0800</lastBuildDate><atom:link href="https://jfy0o0.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; - openmp</title>
      <link>https://jfy0o0.github.io/2021/cpp_openmp/</link>
      <pubDate>Fri, 29 Jan 2021 10:49:45 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/cpp_openmp/</guid>
      <description>openmp 并行开发
标准并行模式执行代码的基本思想是，
 程序开始时只有一个主线程， 程序中的串行部分都由主线程执行， 并行的部分是通过派生其他线程来执行， 但是如果并行部分没有结束时是不会执行串行部分的  使用 1.头文件 #include &amp;lt;omp.h&amp;gt; 2.cmake add_link_options(-fopenmp)add_executable(test main.cpp)FIND_PACKAGE(OpenMP REQUIRED)if (OPENMP_FOUND) message(&amp;#34;OPENMP FOUND&amp;#34;) set(CMAKE_C_FLAGS &amp;#34;${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}&amp;#34;) set(CMAKE_CXX_FLAGS &amp;#34;${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}&amp;#34;)endif ()指令格式 在C++中，OpenMP的指令格式为：
＃pragma omp 指令 [子句[子句]…] **例如： **
#pragma omp parallel private(i, j) parallel 就是指令， private是子句
1. OpenMP的指令 OpenMP的指令有以下一些：（常用的已标黑）
 parallel，用在一个代码段之前，表示这段代码将被多个线程并行执行 for，用于for循环之前，将循环分配到多个线程中并行执行，必须保证每次循环之间无相关性。 parallel for， parallel 和 for语句的结合，也是用在一个for循环之前，表示for循环的代码将被多个线程并行执行。 sections，用在可能会被并行执行的代码段之前 parallel sections，parallel和sections两个语句的结合 critical，用在一段代码临界区之前 single，用在一段只被单个线程执行的代码段之前，表示后面的代码段将被单线程执行。 flush， barrier，用于并行区内代码的线程同步，所有线程执行到barrier时要停止，直到所有线程都执行到barrier时才继续往下执行。 atomic，用于指定一块内存区域被制动更新 master，用于指定一段代码块由主线程执行 ordered， 用于指定并行区域的循环按顺序执行 threadprivate, 用于指定一个变量是线程私有的。  例子1：
#include &amp;lt;iostream&amp;gt;#include &amp;#34;omp.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - c&#43;&#43;17特性</title>
      <link>https://jfy0o0.github.io/2021/cpp_17%E7%89%B9%E6%80%A7/</link>
      <pubDate>Thu, 28 Jan 2021 17:05:27 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/cpp_17%E7%89%B9%E6%80%A7/</guid>
      <description>c++17特性 1.关键字 1. auto关键字 从c++11开始，auto关键字能够通过初始化器推导出变量的类型。在c++14中，auto关键字的能力进一步提升，能够通过return语句推导出函数的返回类型。 使用auto关键字能够提高编码效率，同时能够简化重构流程。但是，C++11中的auto推导，往往结果与预期的不同。
c++11 中为了支持统一初始化，引入了新的统一初始化语法，如下所示。
// c++11 auto x3{ 1, 2 }; // std::initializer_list&amp;lt;int&amp;gt; auto x4 = { 3 }; // decltype(x4) is std::initializer_list&amp;lt;int&amp;gt; auto x5{ 3 }; // std::initializer_list&amp;lt;int&amp;gt; 这三种方式初始化的变量，最终类型推导的结果都是 std::initializer_list ， 而不是我们认为的int。 这是因为 当用于auto声明变量的表达式是{}括起来的，推导的型别就会变成 std::initializer_list。
在C++17中，对auto表达式推导的规则进行了改变
// c++17 auto x3{ 1, 2 }; // error: not a single element auto x4 = { 3 }; // decltype(x4) is std::initializer_list&amp;lt;int&amp;gt; auto x5{ 3 }; // decltype(x5) is int 对比发现， auto x5{3}, 会直接将变量推导成 x5， 而 x3{1, 2} 这种方式也会编译失败。auto推导的规则变得更加直观。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - c&#43;&#43;14特性</title>
      <link>https://jfy0o0.github.io/2021/cpp_14%E7%89%B9%E6%80%A7/</link>
      <pubDate>Thu, 28 Jan 2021 16:35:46 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/cpp_14%E7%89%B9%E6%80%A7/</guid>
      <description>C++14 Lambda 函数 C++14 的泛型 Lambda 使编写如下语句成为可能：
auto lambda = [](auto x， auto y) {return x + y;}; 而另一方面，C++11 要求 Lambda 参数使用具体的类型声明，比如：
auto lambda = [](int x， int y) {return x + y;}; 此外，新标准中的 std::move 函数可用于捕获 Lambda 表达式中的变量，这是通过移动对象而非复制或引用对象实现的：
std::unique_ptr ptr (new int (10)); auto lambda = [value = std::move (ptr)] {return *value;}; int a = 2; [a = sin(a)]() { cout &amp;lt;&amp;lt; cos(a) &amp;lt;&amp;lt; endl; //0.6143 	}(); cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; //2 	cout &amp;lt;&amp;lt; cos(a) &amp;lt;&amp;lt; endl;//-0.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - c&#43;&#43;11特性</title>
      <link>https://jfy0o0.github.io/2021/cpp_11%E7%89%B9%E6%80%A7/</link>
      <pubDate>Thu, 28 Jan 2021 15:31:27 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/cpp_11%E7%89%B9%E6%80%A7/</guid>
      <description>C++11 特性 1 变量和基本类型 1.1 long long 类型 扩展精度浮点数，10位有效数字
1.2 列表初始化 初始化的几种不同形式，其中用花括号来初始化变量称为列表初始化；
int i = 0; int i = {0}; int i{0}; int i(0);  需要注意的是，当用于内置类型的变量时，这种初始化形式有一个重要的特点： 如果我们使用初始化且初始值存在丢失信息的风险，则编译器报错；  long double ld = 3.1414141414; int a{ld}, b = {ld}; //报错 int c(ld), d = ld; //正确 1.3 nullptr 常量 int *p1 = nullptr; // 等价于int *p1 = 0; 1.4 constexpr 变量 将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式；
声明为constexpr的变量一定是一个常量，而且必须用常量表达式来初始化，比如说下面的情况则是不正确的：
int t = 10; constexpr int q = t + 20; cout &amp;lt;&amp;lt; &amp;#34;q&amp;#34; &amp;lt;&amp;lt; q &amp;lt;&amp;lt; endl; 需要将t声明为 const 才是正确的；</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - shared_ptr陷阱</title>
      <link>https://jfy0o0.github.io/2020/cpp_shared_ptr%E9%99%B7%E9%98%B1/</link>
      <pubDate>Thu, 24 Dec 2020 19:55:07 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_shared_ptr%E9%99%B7%E9%98%B1/</guid>
      <description>1：不要把一个原生指针给多个shared_ptr管理 int* ptr = new int; shared_ptr&amp;lt;int&amp;gt; p1(ptr); shared_ptr&amp;lt;int&amp;gt; p2(ptr); //logic error  ptr对象被删除了2次 这种问题比喻成“二龙治水”，在原生指针中也同样可能发生。  2：不要把this指针给shared_ptr #include &amp;lt;memory&amp;gt;#include &amp;lt;iostream&amp;gt; class Bad { public: std::shared_ptr&amp;lt;Bad&amp;gt; getptr() { return std::shared_ptr&amp;lt;Bad&amp;gt;(this); } ~Bad() { std::cout &amp;lt;&amp;lt; &amp;#34;Bad::~Bad() called&amp;#34; &amp;lt;&amp;lt; std::endl; } }; int main() { // 错误的示例，每个shared_ptr都认为自己是对象仅有的所有者 	std::shared_ptr&amp;lt;Bad&amp;gt; bp1(new Bad()); std::shared_ptr&amp;lt;Bad&amp;gt; bp2 = bp1-&amp;gt;getptr(); // 打印bp1和bp2的引用计数 	std::cout &amp;lt;&amp;lt; &amp;#34;bp1.use_count() = &amp;#34; &amp;lt;&amp;lt; bp1.use_count() &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;bp2.use_count() = &amp;#34; &amp;lt;&amp;lt; bp2.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - STL源码剖析 - traits技术</title>
      <link>https://jfy0o0.github.io/2020/cpp_stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-traits%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 21 Dec 2020 18:45:25 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-traits%E6%8A%80%E6%9C%AF/</guid>
      <description>概念  之前已经介绍过迭代器，知道了不同的数据结构都有自己专属的迭代器，不同的迭代器也有不同的特性，由于算法的接口是统一的，通过迭代器的不同属性，算法自动选择正确的执行流程，在完全任务的同时，也尽可能提高算法的执行效率。 那算法如何获知迭代器的属性呢？这一光荣的任务就是traits完成的。 在STL实现中，traits编程技术得到大量的运用，它利用了“内嵌类型”的编程技巧与C++的template参数推导功能，弥补了C++类型识别方面的不足。 通过traits，算法可以原汁原味的将迭代器的属性萃取出来，帮助算法正确高效的运行。  引子 1.以迭代器所指对象的类型声明局部变量 下面是一个以迭代器为模板形参的函数模板：
template&amp;lt;typename Iterator&amp;gt; void func(Iterator iter) { //函数体 } 假如现在算法中需要声明一个变量，而变量的类型是迭代器所指对象的类型，应该怎么处理呢？
template&amp;lt;typename Iterator&amp;gt; void func(Iterator iter) { *Iterator var;//这样定义变量可以吗？ } 上面的代码是不可以通过编译的，虽然C++支持sizeof()，但是并不支持typeof()，就算是用到RTTI性质中的typeid()，获取到的也仅仅是类型的名字，因此不能直接用来声明变量。此时可以利用函数模板的参数类型推导机制解决问题，例如：
template&amp;lt;typename Iterator, typename T&amp;gt; void func_impl(Iterator iter, T t) { T temp;//这里就解决了问题  //这里做原本func()的工作 } template&amp;lt;typename Iterator&amp;gt; void func(Iterator iter) { func_impl(iter, *iter);//func的工作全部都移到func_impl里面了 } int main(int argc, const char *argv[]) { int i; func(&amp;amp;i); }  函数func作为对外接口，实际的操作却由函数func_impl执行，通过函数func_impl的参数类型推导，获取到Iterator指向对象的类型T，从而解决了问题。  2.以迭代器所指对象的类型声明返回类型 ​ 现在通过函数模板的参数类型推导解决了函数体内声明变量的问题，但问题又来了，如果需要返回类型是迭代器所指对象的类型又可以怎样做呢？</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - STL源码剖析 - 迭代器</title>
      <link>https://jfy0o0.github.io/2020/cpp_stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Mon, 21 Dec 2020 17:13:11 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>迭代器作用  在设计模式中有一种模式叫迭代器模式，简单来说就是提供一种方法，在不需要暴露某个容器的内部表现形式情况下，使之能依次访问该容器中的各个元素， 这种设计思维在STL中得到了广泛的应用，是STL的关键所在，通过迭代器，容器和算法可以有机的粘合在一起，只要对算法给予不同的迭代器，就可以对不同容器进行相同的操作。 在这里提到了一个叫迭代器的东西，说得简单一点，就是一种指针，学习C和C++的同学肯定不会对指针感到陌生，这确实是个让我们又爱又恨的东西。 以下以算法find为例，展示了容器、算法和迭代器如何合作：  template&amp;lt;typename InputIterator, typename T&amp;gt; InputIterator find(InputIterator first, InputIterator last, const T &amp;amp;value) { while (first != last &amp;amp;&amp;amp; *frist != value) ++first; return first; } 迭代器是一种智能指针  它将指针进行了一层封装，既包含了原生指针的灵活和强大，也加上很多重要的特性，使其能发挥更大的作用以及能更好的使用。 迭代器对指针的一些基本操作如*、-&amp;gt;、++、==、!=、=进行了重载，使其具有了遍历复杂数据结构的能力，其遍历机制取决于所遍历的数据结构。 下面上一段代码，了解一下迭代器的“智能”：  对于不同的数据容器，以上Iterator类中的成员函数operator++的实现会各不相同，
例如，对于数组的可能实现如下：
//对于数组的实现 template&amp;lt;typename T&amp;gt; Iterator&amp;amp; operator++() { ++m_ptr; retrun *this; } 对于链表，它会有一个类似于next的成员函数用于获取下一个结点，其可能实现如下：
//对于链表的实现 template&amp;lt;typename T&amp;gt; Iterator&amp;amp; operator++() { m_ptr = m_ptr-&amp;gt;next();//next()用于获取链表的下一个节点  return *this; } 不同的容器都有专属的迭代器 下面尝试实现一个自己的迭代器，由于迭代器的作用对象是容器，因此需要首先实现一个容器，下面代码展示了一个
单向链表的实现： template&amp;lt;typename T&amp;gt; class ListItem { public: ListItem() { m_pNext = 0;} ListItem(T v, ListItem *p = 0) { m_value = v; m_pNext = p;} T Value() const { return m_value;} ListItem* Next() const { return m_pNext;} private: T m_value;	//存储的数据  ListItem* m_pNext;	//指向下一个ListItem的指针 }; template&amp;lt;typename T&amp;gt; class List { public: //从链表尾部插入元素  void Push(T value) { m_pTail = new ListItem&amp;lt;T&amp;gt;(value); m_pTail = m_pTail-&amp;gt;Next(); } //打印链表元素  void Print(std::ostream &amp;amp;os = std::cout) const {	for (ListItem&amp;lt;T&amp;gt; *ptr = m_pHead; ptr; ptr = ptr-&amp;gt;Next()) os&amp;lt;&amp;lt;ptr-&amp;gt;Value&amp;lt;&amp;lt;&amp;#34; &amp;#34;; os&amp;lt;&amp;lt;endl; } //返回链表头部指针  ListItem&amp;lt;T&amp;gt;* Begin() const { return m_pHead;} //返回链表尾部指针  ListItem&amp;lt;T&amp;gt;* End() const { return 0;} //其它成员函数  private： ListItem&amp;lt;T&amp;gt; *m_pHead; //指向链表头部的指针  ListItem&amp;lt;T&amp;gt; *m_pTail; //指向链表尾部的指针  long m_nSize; //链表长度 }; 迭代器实现： template&amp;lt;typename T&amp;gt; class ListIter { public: ListIter(T *p = 0) : m_ptr(p){} //解引用，即dereference  T&amp;amp; operator*() const { return *m_ptr;} //成员访问，即member access  T* operator-&amp;gt;() const { return m_ptr;} //前置++操作  ListIter&amp;amp; operator++() { m_ptr = m_ptr-&amp;gt;Next(); //暴露了ListItem的东西  return *this; } //后置++操作  ListIter operator++(int) { ListIter temp = *this; ++*this; return temp; } //判断两个ListIter是否指向相同的地址  bool opeartor==(const ListIter &amp;amp;arg) const { return arg.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - STL源码剖析 - 空间配置器</title>
      <link>https://jfy0o0.github.io/2020/cpp_stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8/</link>
      <pubDate>Mon, 21 Dec 2020 16:14:02 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_stl%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8/</guid>
      <description>空间配置器 前言 在STL中，容器的定义中都带一个模板参数，如vector
template &amp;lt;class T, class Alloc = alloc&amp;gt; class vector {...} 其中第二个参数就是该容器使用的空间配置器，其中缺省使用STL已经实现的空间配置器(alloc)，
该配置器使用malloc/free等为vector分配内存。
缺省的空间配置器  alloc定义了两级的空间配置器， 第一级是对malloc/free简单的封装。 而为了解决内存碎片的问题，跟进行内存管理，alloc实现的第二级的空间配置器。 第二级空间配置器在分配大块内存(大于128bytes)时，会直接调用第一级空间配置器， 而分配小于128bytes的内存时，则使用内存池跟free_list进行内存分配/管理。  第一级空间配置器  它可以设定一个处理内存不足的时候的处理函数(跟set_new_handler类似)。  class base_alloc { public: // 只是对malloc/free的简单封装  static void* allocate(size_t n) { void* res = malloc(n); if (0 == res) res = oom_malloc(n); return res; } static void* reallocate(void* p, size_t new_sz) { void* res = realloc(p, new_sz); if (0 == res) res = oom_realloc(p, new_sz); return res; } static void deallocate(void* p) { free(p); } // 用来设置内存不足时的处理函数 该函数参数跟返回值都是一个函数指针  // 一般会抛出异常/尝试回收内存  static void(*set_handler(void(*f)()))() { void(*old)() = _oom_handler; _oom_handler = f; return old; } private: // 用来处理内存不足的情况  static void* oom_malloc(size_t n) { void(*my_handler)(); void* res; for (;;) { my_handler = _oom_handler; if (0 == my_handler) { return NULL; } (*my_handler)(); if (res = malloc(n)) return res; } } // 用来处理内存不足的情况  static void* oom_realloc(void* p, size_t n) { void(*my_handler)(); void* res; for (;;) { my_handler = _oom_handler; if (0 == my_handler) { return NULL; } (*my_handler)(); if (res = reallocate(p, n)) return res; } } // 由用户设置，在内存不足的时候进行处理，由上面两个函数调用  static void(*_oom_handler)(); }; // 处理函数默认为0 void(*base_alloc::_oom_handler)() = 0; 第二级空间配置器  该配置器维护一个free_list，这是一个指针数组。 在分配内存的时候，补足8bytes的倍数，free_list数组中每个指针分别管理分配大小为8、16、24、32&amp;hellip;bytes的内存。 下图表示从二级空间配置器中分配内存时是如何维护free_list的(建议参考下面源码阅读)。 开始所有指针都为0，没有可分配的区块时(就是free_list[i]==0)会从内存池中分配内存(默认分配20个区块)插入到free_list[i]中。 然后改变free_list[i]的指向，指向下一个区块(free_list_link指向下一个区块，如果没有则为0)。  enum { _ALIGN = 8 }; // 对齐 enum { _MAX_BYTES = 128 }; // 区块大小上限 enum { _NFREELISTS = _MAX_BYTES / _ALIGN }; // free-list个数  class default_alloc { private: // 将bytes上调到8的倍数  static size_t ROUND_UP(size_t bytes) { return (bytes + _ALIGN - 1) &amp;amp; ~(_ALIGN - 1); } private: union obj { union obj* free_list_link; char client_data[1]; }; private: // 16个free-lists 各自管理分别为8,16,24.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - STL Algorithm</title>
      <link>https://jfy0o0.github.io/2020/cpp_stl_algorithm/</link>
      <pubDate>Sat, 12 Dec 2020 08:47:21 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_stl_algorithm/</guid>
      <description>非修改性序列操作（12个） 循环          对序列中的每个元素执行某操作 for_each()    查找          在序列中找出某个值的第一次出现的位置 find()   在序列中找出符合某谓词的第一个元素 find_if()   在序列中找出一子序列的最后一次出现的位置 find_end()   在序列中找出第一次出现指定值集中之值的位置 find_first_of()   在序列中找出相邻的一对值 adjacent_find()    计数          在序列中统计某个值出现的次数 count()   在序列中统计与某谓词匹配的次数 count_if()    比较          找出两个序列相异的第一个元素 mismatch()   两个序列中的对应元素都相同时为真 equal()    搜索          在序列中找出一子序列的第一次出现的位置 search()   在序列中找出一值的连续n次出现的位置 search_n()    修改性序列操作（27个） 复制          从序列的第一个元素起进行复制 copy()   从序列的最后一个元素起进行复制 copy_backward()    交换          交换两个元素 swap()   交换指定范围的元素 swap_ranges()   交换由迭代器所指的两个元素 iter_swap()    变换          将某操作应用于指定范围的每个元素 transform()    替换          用一个给定值替换一些值 replace()   替换满足谓词的一些元素 replace_if()   复制序列时用一给定值替换元素 replace_copy()   复制序列时替换满足谓词的元素 replace_copy_if()    填充          用一给定值取代所有元素 fill()   用一给定值取代前n个元素 fill_n()    生成          用一操作的结果取代所有元素 generate()   用一操作的结果取代前n个元素 generate_n()    删除          删除具有给定值的元素 remove()   删除满足谓词的元素 remove_if()   复制序列时删除具有给定值的元素 remove_copy()   复制序列时删除满足谓词的元素 remove_copy_if()    唯一          删除相邻的重复元素 unique()   复制序列时删除相邻的重复元素 unique_copy()    反转          反转元素的次序 reverse()   复制序列时反转元素的次序 reverse_copy()    环移          循环移动元素 rotate()   复制序列时循环移动元素 rotate_copy()    随机          采用均匀分布来随机移动元素 random_shuffle()    划分          将满足某谓词的元素都放到前面 partition()   将满足某谓词的元素都放到前面并维持原顺序 stable_partition()    序列排序及相关操作（27个） 排序          以很好的平均效率排序 sort()   排序，并维持相同元素的原有顺序 stable_sort()   将序列的前一部分排好序 partial_sort()   复制的同时将序列的前一部分排好序 partial_sort_copy()    第n个元素          将第n各元素放到它的正确位置 nth_element()    二分检索          找到大于等于某值的第一次出现 lower_bound()   找到大于某值的第一次出现 upper_bound()   找到（在不破坏顺序的前提下）可插入给定值的最大范围 equal_range()   在有序序列中确定给定元素是否存在 binary_search()    归并          归并两个有序序列 merge()   归并两个接续的有序序列 inplace_merge()    有序结构上的集合操作          一序列为另一序列的子序列时为真 includes()   构造两个集合的有序并集 set_union()   构造两个集合的有序交集 set_intersection()   构造两个集合的有序差集 set_difference()   构造两个集合的有序对称差集（并-交） set_symmetric_difference()    堆操作          向堆中加入元素 push_heap()   从堆中弹出元素 pop_heap()   从序列构造堆 make_heap()   给堆排序 sort_heap()    最大和最小          两个值中较小的 min()   两个值中较大的 max()   序列中的最小元素 min_element()   序列中的最大元素 max_element()    词典比较          两个序列按字典序的第一个在前 lexicographical_compare()    排列生成器          按字典序的下一个排列 next_permutation()   按字典序的前一个排列 prev_permutation()    函数对象类模板    函数对象类模板 成员函数 T operator ( const T &amp;amp; x, const T &amp;amp; y) 的功能     plus  return x + y;   minus &amp;lt; &amp;gt; return x - y;   multiplies  return x * y;   divides  return x / y;   modulus  return x % y;        成员函数 bool operator( const T &amp;amp; x, const T &amp;amp; y) 的功能   equal_to  return x == y;   not_equal_to  return x!</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - lambda表达式</title>
      <link>https://jfy0o0.github.io/2020/cpp_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 11 Dec 2020 16:54:59 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>lambda 说明  lambda表达式 就是一个函数（匿名函数），也就是没有函数名的函数。 为什么不需要函数名呢，因为我们直接（一次性的）用它，嵌入式用的它，不需要其他地方调用它。 lambda表达式也叫闭包，闭就是封闭的意思，就是其他地方都不用他，包就是函数。 lambda表达式其实就是一个函数对象，他内部创建了一个重载()操作符的类。  简易入门 //最简单的一个lambda表达式。 int main() { [] { }();//[]代表lambda表达式的开始，{}代表函数体，什么都没有，()代表调用函数. } // []() {}(); // 加了一个()代表函数参数。什么参数都没有，就可以省略。 输出 int main() { [] { cout &amp;lt;&amp;lt; &amp;#34;Hello, World!&amp;#34;; }(); auto lam = [] { cout &amp;lt;&amp;lt; &amp;#34;Hello, World!&amp;#34;; }; lam(); } 返回值 // -&amp;gt; int ：代表返回int。  int main() { auto lam =[]() -&amp;gt; int { cout &amp;lt;&amp;lt; &amp;#34;Hello, World!&amp;#34;; return 1; }; auto ret = lam(); auto lam2 =[]() -&amp;gt; string { cout &amp;lt;&amp;lt; &amp;#34;Hello, World!</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - cast用法</title>
      <link>https://jfy0o0.github.io/2020/cpp_cast%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 10 Dec 2020 11:34:01 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_cast%E7%94%A8%E6%B3%95/</guid>
      <description>static_cast static_cast&amp;lt; new_type &amp;gt;(expression)  相当于传统的C语言里的强制转换 把expression转换为new_type类型 编译时检查，用于非多态的转换，可以转换指针及其他 没有运行时类型检查来保证转换的安全性  用法  用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。  进行上行转换（把派生类的指针或引用转换成基类表示）是安全的； 进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。   用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。 把空指针转换成目标类型的空指针。 把任何类型的表达式转换成void类型。 static_cast不能转换掉expression的const、volatile、或者__unaligned属性  例子 char a = &amp;#39;a&amp;#39;; int b = static_cast&amp;lt;int&amp;gt;(a);//正确，将char型数据转换成int型数据  double *c = new double; void *d = static_cast&amp;lt;void*&amp;gt;(c);//正确，将double指针转换成void指针  int e = 10; const int f = static_cast&amp;lt;const int&amp;gt;(e);//正确，将int型数据转换成const int型数据  const int g = 20; int *h = static_cast&amp;lt;int*&amp;gt;(&amp;amp;g);//编译错误，static_cast不能转换掉g的const属性  class Base {}; class Derived : public Base {} Base* pB = new Base(); if(Derived* pD = static_cast&amp;lt;Derived*&amp;gt;(pB)) {}//下行转换是不安全的(坚决抵制这种方法)  Derived* pD = new Derived(); if(Base* pB = static_cast&amp;lt;Base*&amp;gt;(pD)) {}//上行转换是安全的 dynamic_cast dynamic_cast&amp;lt; type* &amp;gt;(e) //type必须是一个类类型且必须是一个有效的指针 dynamic_cast&amp;lt; type&amp;amp; &amp;gt;(e) //type必须是一个类类型且必须是一个左值 dynamic_cast&amp;lt; type&amp;amp;&amp;amp; &amp;gt;(e) //type必须是一个类类型且必须是一个右值 e的类型必须符合以下三个条件中的任何一个：</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - new的三种用法</title>
      <link>https://jfy0o0.github.io/2020/cpp_new%E7%9A%84%E4%B8%89%E7%A7%8D%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 04 Dec 2020 10:19:49 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_new%E7%9A%84%E4%B8%89%E7%A7%8D%E7%94%A8%E6%B3%95/</guid>
      <description>new用法总结 new可以说是个
 一个关键字， 一个运算符 可以被重载。  new operator 这个就是平时最经常用的new，用法如下程序所示：
class A { public: A(int i) :a(i){} private: int a; }; int main() { A* example = new A(1); } 说明 new operator实际上执行了以下三个步骤：
 调用operator new分配内存（后面要说的第二种new），  如果类本身定义了operator new，那么会调用类自己的operator new，而不是全局的； 如果未定义，则是全局的   调用A的构造函数A::A(int)； 返回相应的指针  operator new operator new不调用构造函数，而仅仅分配内存，
有两个版本，
 前者抛出异常 后者当失败时不抛出异常，而是直接返回：  void* operator new (std::size_t size); void* operator new (std::size_t size, const std::nothrow_t&amp;amp; nothrow_value) noexcept; class A { public: A(int i) :a(i){} void* operator new(size_t size) { cout &amp;lt;&amp;lt; &amp;#34;call A::operator new&amp;#34; &amp;lt;&amp;lt; endl; return malloc(size); } void operator delete(void* p) { cout &amp;lt;&amp;lt; &amp;#34;call A::operator delete&amp;#34; &amp;lt;&amp;lt; endl; return free(p); } void* operator new(size_t size, const nothrow_t&amp;amp; nothrow_value) noexcept { cout &amp;lt;&amp;lt; &amp;#34;call A::operator new (noexcept)&amp;#34; &amp;lt;&amp;lt; endl; return malloc(size); } void operator delete(void* p, const nothrow_t&amp;amp; nothrow_value) noexcept { cout &amp;lt;&amp;lt; &amp;#34;call A::operator delete (noexcept)&amp;#34; &amp;lt;&amp;lt; endl; free(p); } private: int a; }; int main() { A* example1 = new A(1); delete example1; A* example2 = new(nothrow) A(2); delete example2; } placement new placement new仅在一个已经分配好的内存指针上调用构造函数，基本形式如下：</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - 使用技巧</title>
      <link>https://jfy0o0.github.io/2020/cpp_%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 03 Dec 2020 18:44:42 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>变长数组 特点：
 变长 空间合理  eg: struct MutableLenArray { int count; char p[0]; }; 宏的妙用 1. “#”符号把一个符号直接转换为字符串，例如：
#define TO_STRING(x) #x const char *str = TO_STRING( test ); ##符号会连接两个符号，从而产生新的符号(词法层次)，例如：
#define SIGN( x ) INT_##x int SIGN( 1 ); //宏被展开后将成为：int INT_1; 2. 变参宏 #define LOG( format, ... ) printf( format, __VA_ARGS__ ) LOG( &amp;#34;%s %d&amp;#34;, str, count );  VA_ARGS是系统预定义宏，被自动替换为参数列表。 经常需要进行输出格式化，重定义时，可以用到以上技巧。  不定参 模板实现： template&amp;lt;typename... T&amp;gt; void func(T... args) { for (auto x : {args.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - 运算符重载小技巧</title>
      <link>https://jfy0o0.github.io/2020/cpp_%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 12 Nov 2020 15:54:13 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>c++ - 运算符重载小技巧 重载 () ： 多次调用(),然后再调用print()
class A{ public: A operator()(int a) { cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt;endl; return *this; } void print() { cout &amp;lt;&amp;lt; &amp;#34;hello&amp;#34;&amp;lt;&amp;lt;endl; } }; int main() { A a; a(54)(434).print(); //54 	//434 	//hello } 重载 ++ ： ++ 运算符，还可分为前缀 ++ 和后缀 ++ 运算符。
class Length { private: int len_inches; public: //前缀++的声明  Length operator++ (); //后缀++的声明  Length operator++ (int); }; 重载前缀++运算符: C++允许重载前缀运算符，以使表达式 ++b 能递增 b 的长度值，并返回结果对象。该运算符可以作为成员函数来重载，这使得它的单个形参是隐含的， 所以重载运算符不需要形参。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - cmake</title>
      <link>https://jfy0o0.github.io/2020/cpp_cmake/</link>
      <pubDate>Mon, 09 Nov 2020 13:47:22 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/cpp_cmake/</guid>
      <description>cmake 1.指定 cmake 的最小版本 cmake_minimum_required(VERSION 3.4.1)这行命令是可选的，我们可以不写这句话，但在有些情况下，如果 CMakeLists.txt 文件中使用了一些高版本 cmake 特有的一些命令的时候，就需要加上这样一行，提醒用户升级到该版本之后再执行 cmake。
2.设置项目名称 project(demo)这个命令不是强制性的，但最好都加上。它会引入两个变量 demo_BINARY_DIR 和 demo_SOURCE_DIR，同时，cmake 自动定义了两个等价的变量 PROJECT_BINARY_DIR 和 PROJECT_SOURCE_DIR。
3.设置编译类型 add_executable(demo demo.cpp) # 生成可执行文件 add_library(common STATIC util.cpp) # 生成静态库 add_library(common SHARED util.cpp) # 生成动态库或共享库 #add_library 默认生成是静态库，通过以上命令生成文件名字， 4.指定编译包含的源文件 4.1 明确指定包含哪些源文件 add_library(demo demo.cpp test.cpp util.cpp)4.2 搜索所有的 cpp 文件 aux_source_directory(dir VAR) 发现一个目录下所有的源代码文件并将列表存储在一个变量中。 aux_source_directory(. SRC_LIST) # 搜索当前目录下的所有.cpp文件 add_library(demo ${SRC_LIST})4.3 自定义搜索规则 file(GLOB SRC_LIST &amp;#34;*.cpp&amp;#34; &amp;#34;protocol/*.cpp&amp;#34;)add_library(demo ${SRC_LIST})#或者 file(GLOB SRC_LIST &amp;#34;*.cpp&amp;#34;)file(GLOB SRC_PROTOCOL_LIST &amp;#34;protocol/*.cpp&amp;#34;)add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})#或者 aux_source_directory(. SRC_LIST)aux_source_directory(protocol SRC_PROTOCOL_LIST)add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})5.</description>
    </item>
    
  </channel>
</rss>
