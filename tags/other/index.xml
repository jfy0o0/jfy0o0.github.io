<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other on Jiang . &#39;s blog</title>
    <link>https://jfy0o0.github.io/tags/other/</link>
    <description>Recent content in Other on Jiang . &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Apr 2021 15:37:06 +0800</lastBuildDate><atom:link href="https://jfy0o0.github.io/tags/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Other - docker</title>
      <link>https://jfy0o0.github.io/2021/other-docker/</link>
      <pubDate>Wed, 21 Apr 2021 15:37:06 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/other-docker/</guid>
      <description>Docker 架构 Docker 包括三个基本概念:
 镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。   Hello World $ docker run ubuntu:15.10 /bin/echo &amp;#34;Hello world&amp;#34; Hello world 各个参数解析：
 docker: Docker 的二进制执行文件。 run: 与前面的 docker 组合来运行一个容器。 ubuntu:15.10 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。 /bin/echo &amp;ldquo;Hello world&amp;rdquo;: 在启动的容器里执行的命令  运行交互式的容器 我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**&amp;ldquo;对话&amp;rdquo;**的能力：
$ docker run -i -t ubuntu:15.10 /bin/bash root@0123ce188bd8:/# 各个参数解析：
 -t: 在新容器内指定一个伪终端或终端。 -i: 允许你对容器内的标准输入 (STDIN) 进行交互。  启动容器（后台模式） 使用以下命令创建一个以进程方式运行的容器</description>
    </item>
    
    <item>
      <title>Other - 内存池</title>
      <link>https://jfy0o0.github.io/2021/other-%E5%86%85%E5%AD%98%E6%B1%A0/</link>
      <pubDate>Thu, 07 Jan 2021 15:30:29 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/other-%E5%86%85%E5%AD%98%E6%B1%A0/</guid>
      <description>内存池 1. 内存池设计 1.1 目的 在给定的内存buffer上建立内存管理机制，根据用户需求从该buffer上分配内存或者将已经分配的内存释放回buffer中。
1.2 要求 尽量减少内存碎片，平均效率高于C语言的malloc和free。
1.3 设计思路  一个存储全部内存的容器 一个存储正在使用的内存的容器 一个存储未被使用的容器  实现 #ifndef TESTJSON_MEMORYPOOL_HPP #define TESTJSON_MEMORYPOOL_HPP  #include &amp;lt;algorithm&amp;gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;set&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;cxxabi.h&amp;gt; template&amp;lt;typename T&amp;gt; class MemoryPool { public: MemoryPool(); MemoryPool(int max_size); virtual ~MemoryPool(); T *alloc(); void release(T *obj); void walkUsedMemList(std::function&amp;lt;void(T *)&amp;gt; func); private: static int ALLOC_STEP; int mMaxSize; int mCurrentSize; std::queue&amp;lt;T *&amp;gt; mFreeMemList; std::set&amp;lt;T *&amp;gt; mUsedMemList; int newMemList(int size); }; template&amp;lt;class T&amp;gt; int MemoryPool&amp;lt;T&amp;gt;::ALLOC_STEP = 20; template&amp;lt;class T&amp;gt; MemoryPool&amp;lt;T&amp;gt;::MemoryPool() { this-&amp;gt;mCurrentSize = 0; this-&amp;gt;mMaxSize = 0; this-&amp;gt;newMemList(ALLOC_STEP); } template&amp;lt;class T&amp;gt; MemoryPool&amp;lt;T&amp;gt;::MemoryPool(int max_size) { this-&amp;gt;mCurrentSize = 0; this-&amp;gt;mMaxSize = max_size; this-&amp;gt;newMemList(ALLOC_STEP); } template&amp;lt;class T&amp;gt; MemoryPool&amp;lt;T&amp;gt;::~MemoryPool() { for_each(mUsedMemList.</description>
    </item>
    
    <item>
      <title>Other - protoBuf</title>
      <link>https://jfy0o0.github.io/2021/other-protobuf/</link>
      <pubDate>Tue, 05 Jan 2021 10:55:26 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/other-protobuf/</guid>
      <description>ProtoBuf 定义  protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。 Protocol Buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。 你可以定义数据的结构，然后使用特殊生成的源代码轻松的在各种数据流中使用各种语言进行编写和读取结构数据。你甚至可以更新数据结构，而不破坏由旧数据结构编译的已部署程序。  特点 简单来讲， ProtoBuf 是结构数据序列化[1] 方法，可简单类比于 XML[2]，其具有以下特点：
 语言无关、平台无关。即 ProtoBuf 支持 Java、C++、Python 等多种语言，支持多个平台 高效。即比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单 扩展性、兼容性好。你可以更新数据结构，而不影响和破坏原有的旧程序  序列化[1]：将结构数据或对象转换成能够被存储和传输（例如网络传输）的格式，同时应当要保证这个序列化结果在之后（可能在另一个计算环境中）能够被重建回原来的结构数据或对象。
类比于 XML[2]：这里主要指在数据通信和数据存储应用场景中序列化方面的类比，但个人认为 XML 作为一种扩展标记语言和 ProtoBuf 还是有着本质区别的。
使用 对 ProtoBuf 的基本概念有了一定了解之后，我们来看看具体该如何使用 ProtoBuf。
第一步，创建 .proto 文件，定义数据结构，如下例1所示： // 例1: 在 xxx.proto 文件中定义 Example1 message message Example1 { optional string stringVal = 1; optional bytes bytesVal = 2; message EmbeddedMessage { int32 int32Val = 1; string stringVal = 2; } optional EmbeddedMessage embeddedExample1 = 3; repeated int32 repeatedInt32Val = 4; repeated string repeatedStringVal = 5;}我们在上例中定义了一个名为 Example1 的 消息，语法很简单，message 关键字后跟上消息名称：</description>
    </item>
    
    <item>
      <title>Other - 对象池</title>
      <link>https://jfy0o0.github.io/2020/other-%E5%AF%B9%E8%B1%A1%E6%B1%A0/</link>
      <pubDate>Fri, 04 Dec 2020 09:27:19 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/other-%E5%AF%B9%E8%B1%A1%E6%B1%A0/</guid>
      <description>对象池  对象池是一种空间换时间的技术，  对象被预先创建并初始化后放入对象池中， 对象提供者就能利用已有的对象来处理请求，并在不需要时归还给池子而非直接销毁   它减少对象频繁创建所占用的内存 空间和初始化时间  原理 描述一个对象池有两个很重要的参数，
  对象池的类型，
  对象池可以获得对象的数量
   对象池的实现和内存池的实现原理很像：  都是一开始申请大内存空间， 然后把大内存分配成小内存空间，当需要使用的时候直接分配使用，不在向系统申请内存空间，也不直接释放内存空间。 使用完之后都是放回池子里   不同的地方在内存池有一个映射数组，在使用时负责快速定位合适的内存池（一个内存池可以有很多内存块大小不同的池子） 但是每一个类型的对象只对应一个对象池，并自己管理自己的对象池。不同类型的对象池是相互独立的存在  优点  减少频繁创建和销毁对象带来的成本，实现对象的缓存和复用 提高了获取对象的响应速度，对实时性要求较高的程序有很大帮助 一定程度上减少了垃圾回收机制（GC）的压力  缺点  1、很难设定对象池的大小，如果太小则不起作用，过大又会占用内存资源过高 2、并发环境中, 多个线程可能(同时)需要获取池中对象, 进而需要在堆数据结构上进行同步或者因为锁竞争而产生阻塞, 这种开销要比创建销毁对象的开销高数百倍; 3、由于池中对象的数量有限, 势必成为一个可伸缩性瓶颈; 4、所谓的脏对象就是指的是当对象被放回对象池后，还保留着刚刚被客户端调用时生成的数据。  脏对象可能带来两个问题   脏对象持有上次使用的引用，导致内存泄漏等问题。
  脏对象如果下一次使用时没有做清理，可能影响程序的处理数据。
  什么条件下使用对象池  资源受限的, 不需要可伸缩性的环境: cpu性能不够强劲, 内存比较紧张, 垃圾收集, 内存抖动会造成比较大的影响, 需要提高内存管理效率,响应性比吞吐量更为重要; 数量受限的, 比如数据库连接; 创建对象的成本比较大，并且创建比较频繁。比如线程的创建代价比较大，于是就有了常用的线程池。  实现   在一部分内存空间（池子）中事先实例化好固定数量的对象，</description>
    </item>
    
    <item>
      <title>Other - git</title>
      <link>https://jfy0o0.github.io/2020/other-git/</link>
      <pubDate>Wed, 11 Nov 2020 13:44:41 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/other-git/</guid>
      <description>一：创建版本库。   通过命令 git init 把这个目录变成git可以管理的仓库
  使用命令 git add readme.txt添加到暂存区里面去。
  用命令 git commit告诉Git，把文件提交到仓库。
  继续使用git status来查看下结果
  二：版本回退：  使用命令 git查看下历史记录 版本回退操作  git reset &amp;ndash;hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 如果要回退到前100个版本的话，git reset &amp;ndash;hard HEAD~100    三：理解工作区与暂存区的区别？  工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。 版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。  我们前面说过使用Git提交文件到版本库有两步：
 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。  四：Git撤销修改和删除文件操作。 一：撤销修改：
 如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。 我可以按以前的方法直接恢复到上一个版本。使用 git reset &amp;ndash;hard HEAD^ 可以发现，Git会告诉你，git checkout &amp;ndash; file 可以丢弃工作区的修改，如下命令： git checkout &amp;ndash; readme.</description>
    </item>
    
  </channel>
</rss>
