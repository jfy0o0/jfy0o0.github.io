<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Jiang . &#39;s blog</title>
    <link>https://jfy0o0.github.io/tags/linux/</link>
    <description>Recent content in Linux on Jiang . &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jul 2021 13:43:01 +0800</lastBuildDate><atom:link href="https://jfy0o0.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux - io 多路复用</title>
      <link>https://jfy0o0.github.io/2021/linux-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Thu, 29 Jul 2021 13:43:01 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/linux-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>select 基本概念 　IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。IO多路复用适用如下场合：
 当客户处理多个描述字时（一般是交互式输入和网络套接口），必须使用I/O复用。 当一个客户同时处理多个套接口时，而这种情况是可能的，但很少出现。 如果一个TCP服务器既要处理监听套接口，又要处理已连接套接口，一般也要用到I/O复用。 如果一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用。 如果一个服务器要处理多个服务或多个协议，一般要使用I/O复用。  　与多进程和多线程技术相比，I/O多路复用技术的最大优势是系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减小了系统的开销。
select函数 该函数准许进程指示内核等待多个事件中的任何一个发送，并只在有一个或多个事件发生或经历一段指定的时间后才唤醒。函数原型如下：
#include &amp;lt;sys/select.h&amp;gt;#include &amp;lt;sys/time.h&amp;gt; int select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, const struct timeval *timeout) // 返回值：就绪描述符的数目，超时返回0，出错返回-1 函数参数介绍如下：
  第一个参数maxfdp1指定待测试的描述字个数，它的值是待测试的最大描述字加1（因此把该参数命名为maxfdp1），描述字0、1、2&amp;hellip;maxfdp1-1均将被测试。因为文件描述符是从0开始的。
  中间的三个参数readset、writeset和exceptset指定我们要让内核测试读、写和异常条件的描述字。
  如果对某一个的条件不感兴趣，就可以把它设为空指针。
  struct fd_set可以理解为一个集合，这个集合中存放的是文件描述符，可通过以下四个宏进行设置：
  void FD_ZERO(fd_set *fdset); //清空集合  void FD_SET(int fd, fd_set *fdset); //将一个给定的文件描述符加入集合之中  void FD_CLR(int fd, fd_set *fdset); //将一个给定的文件描述符从集合中删除  int FD_ISSET(int fd, fd_set *fdset); // 检查集合中指定的文件描述符是否可以读写  timeout告知内核等待所指定描述字中的任何一个就绪可花多少时间。其timeval结构用于指定这段时间的秒数和微秒数。  struct timeval{ long tv_sec; //seconds  long tv_usec; //microseconds  }; 这个参数有三种可能：</description>
    </item>
    
    <item>
      <title>Linux - note</title>
      <link>https://jfy0o0.github.io/2021/linux-note/</link>
      <pubDate>Tue, 20 Jul 2021 10:19:18 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/linux-note/</guid>
      <description>fd 1.所有进程允许打开的最大fd数量 cat /proc/sys/fs/file-max 2.所有进程已经打开的fd数量及允许的最大数量 /proc/sys/fs/file-nr 3.单个进程允许打开的最大fd数量 ulimit -n 4.单个进程（例如进程id为5454）已经打开的fd ls -l /proc/5454/fd/ /proc/[pid] cmdline /proc/[pid]/cmdline 是一个只读文件，包含进程的完整命令行信息。如果该进程已经被交换出内存或者这个进程是 zombie 进程，则这个文件没有任何内容
exe /proc/[pid]/exe 为实际运行程序的符号链接。举例如下：
$ ls -lt /proc/2406/exe lrwxrwxrwx 1 root root 0 Dec 11 19:00 /proc/2406/exe -&amp;gt; /usr/bin/frps fd fd 是一个目录，包含进程打开文件的情况。举例如下：
$ ls -lt /proc/2406/fd lrwx------ 1 root root 64 Dec 24 09:39 77 -&amp;gt; socket:[44377722] lrwx------ 1 root root 64 Dec 17 15:07 47 -&amp;gt; socket:[29482617] lr-x------ 1 root root 64 Dec 12 20:18 0 -&amp;gt; pipe:[13282] l-wx------ 1 root root 64 Dec 12 20:18 1 -&amp;gt; pipe:[13283] lrwx------ 1 root root 64 Dec 12 20:18 10 -&amp;gt; socket:[12238218] lrwx------ 1 root root 64 Dec 12 20:18 4 -&amp;gt; anon_inode:[eventpoll] lrwx------ 1 root root 64 Dec 12 20:18 40 -&amp;gt; socket:[19378614] status /proc/[pid]/status 包含进程的状态信息。其很多内容与 /proc/[pid]/stat 和 /proc/[pid]/statm 相同，但是却是以一种更清晰地方式展现出来。举例如下：</description>
    </item>
    
    <item>
      <title>Linux - errno</title>
      <link>https://jfy0o0.github.io/2021/linux-errno/</link>
      <pubDate>Thu, 20 May 2021 18:43:59 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/linux-errno/</guid>
      <description>错误码 / errno  Linux中系统调用的错误都存储于 errno中，errno由操作系统维护，存储就近发生的错误，即下一次的错误码会覆盖掉上一次的错误。 PS: 只有当系统调用或者调用lib函数时出错，才会置位errno！  /* Function: obtain the errno string * char *strerror(int errno) */ #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt; //for strerror()//#include &amp;lt;errno.h&amp;gt; int main() { int tmp = 0; for(tmp = 0; tmp &amp;lt;=256; tmp++) { printf(&amp;#34;errno: %2d\t%s\n&amp;#34;,tmp,strerror(tmp)); } return 0; } errno: 0 Success errno: 1 Operation not permitted errno: 2 No such file or directory errno: 3 No such process errno: 4 Interrupted system call errno: 5 Input/output error errno: 6 No such device or address errno: 7 Argument list too long errno: 8 Exec format error errno: 9 Bad file descriptor errno: 10 No child processes errno: 11 Resource temporarily unavailable errno: 12 Cannot allocate memory errno: 13 Permission denied errno: 14 Bad address errno: 15 Block device required errno: 16 Device or resource busy errno: 17 File exists errno: 18 Invalid cross-device link errno: 19 No such device errno: 20 Not a directory errno: 21 Is a directory errno: 22 Invalid argument errno: 23 Too many open files in system errno: 24 Too many open files errno: 25 Inappropriate ioctl for device errno: 26 Text file busy errno: 27 File too large errno: 28 No space left on device errno: 29 Illegal seek errno: 30 Read-only file system errno: 31 Too many links errno: 32 Broken pipe errno: 33 Numerical argument out of domain errno: 34 Numerical result out of range errno: 35 Resource deadlock avoided errno: 36 File name too long errno: 37 No locks available errno: 38 Function not implemented errno: 39 Directory not empty errno: 40 Too many levels of symbolic links errno: 41 Unknown error 41 errno: 42 No message of desired type errno: 43 Identifier removed errno: 44 Channel number out of range errno: 45 Level 2 not synchronized errno: 46 Level 3 halted errno: 47 Level 3 reset errno: 48 Link number out of range errno: 49 Protocol driver not attached errno: 50 No CSI structure available errno: 51 Level 2 halted errno: 52 Invalid exchange errno: 53 Invalid request descriptor errno: 54 Exchange full errno: 55 No anode errno: 56 Invalid request code errno: 57 Invalid slot errno: 58 Unknown error 58 errno: 59 Bad font file format errno: 60 Device not a stream errno: 61 No data available errno: 62 Timer expired errno: 63 Out of streams resources errno: 64 Machine is not on the network errno: 65 Package not installed errno: 66 Object is remote errno: 67 Link has been severed errno: 68 Advertise error errno: 69 Srmount error errno: 70 Communication error on send errno: 71 Protocol error errno: 72 Multihop attempted errno: 73 RFS specific error errno: 74 Bad message errno: 75 Value too large for defined data type errno: 76 Name not unique on network errno: 77 File descriptor in bad state errno: 78 Remote address changed errno: 79 Can not access a needed shared library errno: 80 Accessing a corrupted shared library errno: 81 .</description>
    </item>
    
    <item>
      <title>Linux - 线程同步 - 条件变量</title>
      <link>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</link>
      <pubDate>Fri, 20 Nov 2020 16:50:06 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</guid>
      <description>条件变量 条件变量是利用线程间共享全局变量进行同步的一种机制。
条件变量上的基本操作有：
 触发条件(当条件变为 true 时)； 等待条件，挂起线程直到其他线程触发条件。  声明 //初始化条件变量　//尽管POSIX标准中为条件变量定义了属性，但在Linux中没有实现，因此cond_attr值通常为NULL，且被忽略。 int pthread_cond_init(pthread_cond_t *cond,pthread_condattr_t *cond_attr); //无条件等待 int pthread_cond_wait(pthread_cond_t *cond,pthread_mutex_t *mutex); //计时等待 int pthread_cond_timewait(pthread_cond_t *cond,pthread_mutex *mutex,const timespec *abstime); /* 无论哪种等待方式，都必须和一个互斥锁配合，以防止多个线程同时请求（用 pthread_cond_wait() 或 pthread_cond_timedwait() 请求）竞争条件（Race Condition）。 mutex互斥锁必须是普通锁（PTHREAD_MUTEX_TIMED_NP）或者适应锁（PTHREAD_MUTEX_ADAPTIVE_NP）， 且在调用pthread_cond_wait()前必须由本线程加锁（pthread_mutex_lock()）， 而在更新条件等待队列以前，mutex保持锁定状态，并在线程挂起进入等待前解锁。 在条件满足从而离开pthread_cond_wait()之前，mutex将被重新加锁，以与进入pthread_cond_wait()前的加锁动作对应。 */ //激活一个等待该条件的线程（存在多个等待线程时按入队顺序激活其中一个 int pthread_cond_signal(pthread_cond_t *cond); //激活所有等待线程 int pthread_cond_broadcast(pthread_cond_t *cond); //销毁条件变量 int pthread_cond_destroy(pthread_cond_t *cond); 说明：  pthread_cond_wait  自动解锁互斥量(如同执行了pthread_unlock_mutex)，并等待条件变量触发。 这时线程挂起，不占用CPU时间，直到条件变量被触发（变量为ture）。 在调用 pthread_cond_wait之前，应用程序必须加锁互斥量。 pthread_cond_wait函数返回前，自动重新对互斥量加锁(如同执行了pthread_lock_mutex)。 就是说 使用这个函数会自动解锁 ，在满足条件的时候自动加锁   互斥量的解锁和在条件变量上挂起都是自动进行的。  因此，在条件变量被触发前，如果所有的线程都要对互斥量加锁，这种机制可保证在线程加锁互斥量和进入等待条件变量期间，条件变量不被触发。 条件变量要和互斥量相联结，以避免出现条件竞争——个线程预备等待一个条件变量，当它在真正进入等待之前，另一个线程恰好触发了该条件（条件满足信号有可能在测试条件和调用pthread_cond_wait函数（block）之间被发出，从而造成无限制的等待）。   条件变量函数不是异步信号安全的，不应当在信号处理程序中进行调用。  特别要注意，如果在信号处理程序中调用 pthread_cond_signal 或 pthread_cond_boardcast 函数，可能导致调用线程死锁    例子 #include &amp;lt;pthread.</description>
    </item>
    
    <item>
      <title>Linux - 线程同步 - 读写锁</title>
      <link>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E8%AF%BB%E5%86%99%E9%94%81/</link>
      <pubDate>Fri, 20 Nov 2020 16:44:48 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E8%AF%BB%E5%86%99%E9%94%81/</guid>
      <description>读写锁  如果一个线程用读锁锁定了临界区，那么其他线程也可以用读锁来进入临界区，这样就可以多个线程并行操作。但这个时候，如果再进行写锁加锁就会发生阻塞，写锁请求阻塞后，后面如果继续有读锁来请求，这些后来的读锁都会被阻塞！这样避免了读锁长期占用资源，防止写锁饥饿！ 如果一个线程用写锁锁住了临界区，那么其他线程不管是读锁还是写锁都会发生阻塞！  声明 //初始化： int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr); //读写加锁 int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock); int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock); int pthread_rwlock_unlock(pthread_rwlock_t *rwlock); int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock); int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock); int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict rwlock, const struct timespec *restrict abs_timeout); int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict rwlock, const struct timespec *restrict abs_timeout); //销毁锁 int pthread_rwlock_destroy(pthread_rwlock_t *rwlock); 例子: #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; /* 初始化读写锁 */ pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER; //pthread_rwlock_t rwlock; /* 全局资源 */ int global_num = 10; void err_exit(const char *err_msg) { printf(&amp;#34;error:%s\n&amp;#34;, err_msg); exit(1); } /* 读锁线程函数 */ void *thread_read_lock(void *arg) { char *pthr_name = (char *)arg; while (1) { /* 读加锁 */ pthread_rwlock_rdlock(&amp;amp;rwlock); printf(&amp;#34;线程%s进入临界区，global_num = %d\n&amp;#34;, pthr_name, global_num); sleep(1); printf(&amp;#34;线程%s离开临界区.</description>
    </item>
    
    <item>
      <title>Linux - 线程同步 - 互斥锁</title>
      <link>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BA%92%E6%96%A5%E9%94%81/</link>
      <pubDate>Fri, 20 Nov 2020 16:36:13 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BA%92%E6%96%A5%E9%94%81/</guid>
      <description>互斥锁 锁机制是同一时刻只允许一个线程执行一个关键部分的代码。
声明 /* 其中参数 mutexattr 用于指定锁的属性（见下），如果为NULL则使用缺省属性。 互斥锁的属性在创建锁的时候指定，在LinuxThreads实现中仅有一个锁类型属性，不同的锁类型在试图对一个已经被锁定的互斥锁加锁时表现不同。当前有四个值可供选择： （1）PTHREAD_MUTEX_TIMED_NP，这是缺省值，也就是普通锁。当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。 （2）PTHREAD_MUTEX_RECURSIVE_NP，嵌套锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。 （3）PTHREAD_MUTEX_ERRORCHECK_NP，检错锁，如果同一个线程请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型动作相同。这样就保证当不允许多次加锁时不会出现最简单情况下的死锁。 （4）PTHREAD_MUTEX_ADAPTIVE_NP，适应锁，动作最简单的锁类型，仅等待解锁后重新竞争。 */ int pthread_mutex_init(pthread_mutex_t *mutex,const pthread_mutex_attr_t *mutexattr); //阻塞加锁 int pthread_mutex_lock(pthread_mutex *mutex); //非阻塞加锁 int pthread_mutex_trylock( pthread_mutex_t *mutex); //解锁（要求锁是lock状态,并且由加锁线程解锁） int pthread_mutex_unlock(pthread_mutex *mutex); //销毁锁（此时锁必需unlock状态,否则返回EBUSY） int pthread_mutex_destroy(pthread_mutex *mutex); 例子 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;pthread.h&amp;gt; pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; //pthread_mutex_t mutex ; int gn; void* thread(void *arg) { printf(&amp;#34;thread&amp;#39;s ID is %d\n&amp;#34;,pthread_self()); pthread_mutex_lock(&amp;amp;mutex); gn = 12; printf(&amp;#34;Now gn = %d\n&amp;#34;,gn); pthread_mutex_unlock(&amp;amp;mutex); return NULL; } int main() { // pthread_mutex_init(&amp;amp;mutex,NULL);  pthread_t id; printf(&amp;#34;main thread&amp;#39;s ID is %d\n&amp;#34;,pthread_self()); gn = 3; printf(&amp;#34;In main func, gn = %d\n&amp;#34;,gn); if (!</description>
    </item>
    
    <item>
      <title>Linux - 线程同步 - 信号量</title>
      <link>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BF%A1%E5%8F%B7%E9%87%8F/</link>
      <pubDate>Fri, 20 Nov 2020 16:23:29 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5-%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid>
      <description>信号量 信号量和互斥锁(mutex)的区别：
 互斥锁只允许一个线程进入临界区 信号量允许多个线程同时进入临界区。  信号量强调的是线程（或进程）间的同步：“信号量用在多线程多任务同步的，一个线程完成了某一个动作就通过信号量告诉别的线程，别的线程再进行某些动作（大家都在sem_wait的时候，就阻塞在那里）。当信号量为单值信号量时，也可以完成一个资源的互斥访问。信号量测重于访问者对资源的有序访问，在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。
声明 #include&amp;lt;semaphore.h&amp;gt;/* -sem:是要初始化的信号量， -pshared:表示此信号量是在进程间共享还是线程间共享， -value:是信号量的初始值。 */ int sem_init(sem_t *sem, int pshared, unsigned int value); /* -sem:是要销毁的信号量。只有用sem_init初始化的信号量才能用sem_destroy销毁。 */ int sem_destroy(sem_t *sem); /* 等待信号量，如果信号量的值大于0,将信号量的值减1,立即返回。 如果信号量的值为0,则线程阻塞。相当于P操作。成功返回0,失败返回-1。 */ int sem_wait(sem_t *sem); /* 释放信号量，让信号量的值加1。相当于V操作。 */ int sem_post(sem_t *sem); 例子： #include &amp;lt;pthread.h&amp;gt;#include &amp;lt;semaphore.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; /* @Scene: 某行业营业厅同时只能服务两个顾客。 * 有多个顾客到来，每个顾客如果发现服务窗口已满，就等待， * 如果有可用的服务窗口，就接受服务。 */ /* 将信号量定义为全局变量，方便多个线程共享 */ sem_t sem; /* 每个线程要运行的例程 */ void * get_service(void *thread_id) { /* 注意：立即保存thread_id的值，因为thread_id是对主线程中循环变量i的引用，它可能马上被修改 */ int customer_id = *((int *)thread_id); if(sem_wait(&amp;amp;sem) == 0) { usleep(100); /* service time: 100ms */ printf(&amp;#34;customer %d receive service .</description>
    </item>
    
    <item>
      <title>Linux - 进程通信 - 共享内存</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 20 Nov 2020 10:28:40 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>共享内存 共享内存是 Unix下的多进程之间的通信方法,这种方法通常用于一个程序的多进程间通信，实际上多个程序间也可以通过共享内存来传递信息。
特点  所谓共享内存就是使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。 是针对其他通信机制运行效率较低而设计的。 但内部没有共享内存互斥访问机制，所以往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。  声明 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/ipc.h&amp;gt;#include &amp;lt;sys/shm.h&amp;gt;/* fname：指定的文件名（已经存在的文件名），一般使用当前目录，如：&amp;#34;.&amp;#34; id：id是子序号。虽然是int类型，但是只使用8bits(1-255)。 在一般的UNIX实现中，是将文件的索引节点号取出，前面加上子序号得到key_t的返回值。 如:指定文件的索引节点号为65538，换算成16进制为0x010002，而你指定的ID值为38， 换算成16进制为0x26，则最后的key_t返回值为0x26010002。 查询文件索引节点号的方法是： ls -i 当删除重建文件后，索引节点号由操作系统根据当时文件系统的使用情况分配， 因此与原来不同，所以得到的索引节点号也不同。 */ key_t ftok( const char * fname, int id ); /* -key 0(IPC_PRIVATE)：会建立新共享内存对象 大于0的32位整数：视参数shmflg来确定操作。通常要求此值来源于ftok返回的IPC键值 -size 大于0的整数：新建的共享内存大小，以字节为单位 0：只获取共享内存时指定为0 -shmflg 0：取共享内存标识符，若不存在则函数会报错 IPC_CREAT：当shmflg&amp;amp;IPC_CREAT为真时，如果内核中不存在键值与key相等的共享内存，则新建一个共享内存；如果存在这样的共享内存，返回此共享内存的标识符 IPC_CREAT|IPC_EXCL：如果内核中不存在键值与key相等的共享内存，则新建一个共享内存；如果存在这样的共享内存则报错 使用时需要与IPC对象存取权限（如0600）进行|运算来确定信号量集的存取权限 -函数返回值 成功：返回共享内存的标识符 出错：-1，错误原因存于error中 -错误代码 EINVAL：参数size小于SHMMIN或大于SHMMAX EEXIST：预建立key所指的共享内存，但已经存在 EIDRM：参数key所指的共享内存已经删除 ENOSPC：超过了系统允许建立的共享内存的最大值(SHMALL) ENOENT：参数key所指的共享内存不存在，而参数shmflg未设IPC_CREAT位 EACCES：没有权限 ENOMEM：核心内存不足 */ int shmget(key_t key, size_t size, int shmflg); /* shmid：共享内存标识符 cmd IPC_STAT：得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中 IPC_SET：改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内 IPC_RMID：删除这片共享内存 buf：共享内存管理结构体。具体说明参见共享内存内核结构定义部分 函数返回值 成功：0 出错：-1，错误原因存于error中 错误代码 EACCESS：参数cmd为IPC_STAT，确无权限读取该共享内存 EFAULT：参数buf指向无效的内存地址 EIDRM：标识符为shmid的共享内存已被删除 EINVAL：无效的参数cmd或shmid EPERM：参数cmd为IPC_SET或IPC_RMID，却无足够的权限执行 */ int shmctl(int shmid, int cmd, struct shmid_ds *buf) 例子： 写端： #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Linux - 进程通信 - 信号</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 20 Nov 2020 10:10:16 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7/</guid>
      <description>信号  信号是在软件层次上对中断机制的一种模拟，是一种异步通信方式 信号可以直接进行用户空间进程和内核进程之间的交互，内核进程也可以利用它来通知用户空间进程发生了哪些系统事件。 如果该进程当前并未处于执行态，则该信号就由内核保存起来，直到该进程恢复执行再传递给它；如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被取消时才被传递给进程。  响应 用户进程对信号的响应方式：
 忽略信号：对信号不做任何处理，但是有两个信号不能忽略：即SIGKILL及SIGSTOP。 捕捉信号：定义信号处理函数，当信号发生时，执行相应的处理函数。 执行缺省操作：Linux对每种信号都规定了默认操作  种类：  SIGINT：ctrl+c 终止信号 SIGQUIT：ctrl+\ 终止信号 SIGTSTP:ctrl+z 暂停信号 SIGALRM：闹钟信号 收到此信号后定时结束，结束进程 SIGCHLD：子进程状态改变，父进程收到信号 SIGKILL：杀死信号  声明 /* 功能：信号发送 -参数：pid：指定进程 -sig：要发送的信号 -返回值：成功 0；失败 -1 */ int kill(pid_t pid, int sig); /* 功能：进程向自己发送信号 -参数：sig：信号 -返回值：成功 0；失败 -1 */ int raise(int sig); /* 功能：在进程中设置一个定时器 -参数：seconds：定时时间，单位为秒 -返回值：如果调用此alarm()前，进程中已经设置了闹钟时间，则返回上一个闹钟时间的剩余时间，否则返回0。 */ unsigned int alarm(unsigned int seconds) 注意：一个进程只能有一个闹钟时间。如果在调用alarm时已设置过闹钟时间，则之前的闹钟时间被新值所代替 //功能：用于将调用进程挂起直到收到信号为止。 int pause(void); /* 功能：信号处理函数 参数： -signum：要处理的信号//不能是SIGKILL和SIGSTOP -handler：SIG_IGN：忽略该信号。 -SIG_DFL：采用系统默认方式处理信号。 自定义的信号处理函数指针 返回值：成功：设置之前的信号处理方式；失败：SIG_ERR */ void (*signal(int signum, void (*handler)(int)))(int); //　或者： 　typedef void (*sighandler_t)(int); sighandler_t signal(int signum, sighandler_t handler); //给自己发送异常终止信号，（6.</description>
    </item>
    
    <item>
      <title>Linux - 进程通信 - 消息队列</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 20 Nov 2020 09:52:58 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>消息队列  消息队列实质为内核地址空间中的内部链表，在Linux中各个进程之间传递内容 消息顺序的发送到队列中，以不同的方式从队列中获取，消息队列可以用IPC标识符唯一地进行标识。 消息队列由IPC标识符进行区别，队列与队列之间是相互独立的。 每个消息队列中的消息，又构成一个独立的链表。  声明 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/ipc.h&amp;gt;#include &amp;lt;sys/msg.h&amp;gt;/* 用于创建一个新的消息队列，或者访问一个现有的队列。 -key：为键值，由ftok（）函数生成。 -msgflg： IPC_CREAT:内核中不存在该队列，则创建它； IPC_EXCL:当与IPC_CREAT一起使用时，如果队列早已存在则将出错。 */ int msgget ( key_t key ,int msgflg); /* 用于向一个队列传递消息。 -msqid：队列标识符，是由前面调用msgget（）获得的返回值。 -msgp：指向消息缓冲区。 -msgsz：消息缓冲区的大小。 -msgflag： 可以设置为0，表示忽略 可以设置为IPC_NOWAIT：如果消息队列已经满了，则不会写入消息队列。若没有写，则调用进程将被中断，直到可以写消息为止。 */ int msgsnd (int msqid, const void *msgp, size_t msgsz , int msgflag); /* 用于在消息队列上执行接收操作 -msqid：队列标识符，是由前面调用msgget（）获得的返回值。 -msgp：指向消息缓冲区。 -msgsz：消息缓冲区的大小。 -mtype:指定要从队列中获取的消息类型。 -msgflag: 若设置为IPC_NOWAIT作为一个标志传送给该函数，而队列没有消息，则会返回ENOMSG。否则进程将被阻塞。 如果在等待消息的时候队列被删除，则返回EIDRM。 如果进程阻塞并等待消息的到来时捕获到了一个信号，则返回EINTR。 */ int msgrcv (int msqid, void *msgp, size_t msgsz , long msgtyp ,int msgflag); /* 向内核发送一个cmd命令，内核根据此来判断进行何种操作。 -msqid：队列标识符，是由前面调用msgget（）获得的返回值。 -cmd: IPC_STAT:把msgid_ds结构中的数据设置为消息队列的当前关联值，即用消息队列的当前关联值覆盖msgid_ds的值。 IPC_SET：把消息列队的当前关联值设置为msgid_ds结构中给出的值 IPC_RMID：删除消息队列 */ int msgclt (int msqid, int cmd, struct msqid_ds *buf); struct msgbuf { __syscall_slong_t mtype;	/* type of received/sent message */ char mtext[1];	/* text of the message */ }; 例子 发端： #include &amp;lt;unistd.</description>
    </item>
    
    <item>
      <title>Linux - 进程通信 - 信号量</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7%E9%87%8F/</link>
      <pubDate>Fri, 20 Nov 2020 09:45:22 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid>
      <description>信号量  信号量是一种计数器 生产者消费者的典型使用  声明 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/ipc.h&amp;gt;#include &amp;lt;sys/sem.h&amp;gt;/* 用于创建一个新的信号量集合 - key:ftok()生成的键值 - nsems:指定在新的集合中创建信号量的数目 - semflsg:打开信号量的方式 */ int semget (key_t key ,int nsems , int semflg); /* 对信号量的P、V操作 - sembuf：将要在信号量上执行的操作 - nsops：操作个数 */ int semop (int semid,struct sembuf *sops,unsigned nsops); /* 用于在信号量集合上执行控制操作。 */ int semctl (int semid,int semnum,int cmd,...); 例子： #include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt; using namespace std; #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/ipc.h&amp;gt;#include &amp;lt;sys/sem.h&amp;gt; union semun { int val; struct semid_ds *buf; unsigned short *array; }arg; int CreateSem(key_t key,int value){ union semun sem; int semid ; sem.</description>
    </item>
    
    <item>
      <title>Linux - 进程通信 - 有名管道</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93/</link>
      <pubDate>Fri, 20 Nov 2020 09:36:37 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93/</guid>
      <description>命名管道的基本概念  命名管道与前篇文章中的半双工管道非常相似 在文件系统中命名管道是以设备特殊文件的形式存在的 不同的进程可以通过命名管道共享数据，与普通管道不同的是可与无血缘关系的进程进行通信。  声明 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;int mkfifo (consta char* pathname , mode_t mode); 例子 写端： #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;iostream&amp;gt;using namespace std; int main(int argc , char **argv){ int wfd = open(&amp;#34;mypipe&amp;#34;,O_WDONLY); if( wfd &amp;lt; 0 ){ printf( &amp;#34;open failed &amp;#34; ); return -1; } int ret = mkfifo (&amp;#34;mypipe&amp;#34; , 0664); if( ret &amp;lt; 0){ printf ( &amp;#34;mkfifo failed&amp;#34; ); return -1; } while(1){ char buf[1024]; cin &amp;gt;&amp;gt; buf; ret = write(wfd , buf ,sizeof (buf)); if(ret &amp;gt;= 0 ){ printf( &amp;#34; buf: %s&amp;#34;,buf ); } } close (wfd); return 0; } 读端： #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Linux - 进程通信 - 匿名管道</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93/</link>
      <pubDate>Fri, 20 Nov 2020 09:25:44 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93/</guid>
      <description>管道 管道是一种古老的IPC通信形式。它有两个特点：
 半双工，即不能同时在两个方向上传输数据。有的系统可能支持全双工。 只能在父子进程间。经典的形式就是管道由父进程创建，进程fork子进程之后，就可以在父子进程之间使用了。 进程创建管道，每次创建两个文件描述符来操作管道。 其中一个对管道进行写，另一个对管道进行读操作。  声明 使用popen函数和pclose函数结合来执行系统命令，就用到了管道，它们声明如下：
FILE *popen(const char *command,const char *type); int pclose(FILE *stream); #include &amp;lt;unistd.h&amp;gt;int pipe(int filedes[2]);  filedes是一个文件描述符的数组，用于保存管道返回的两个文件描述符。 下标为0是为了读操作而创建打开的，下标为1是为了写操作而创建打开的。 执行成功返回0；失败返回1；  例子 我们看一个简单的使用管道的例子，这里使用了pipe函数来创建管道：
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#define MAX_LEN 128 int main() { /*0为读，1为写*/ int fd[2] = {0}; //描述符  pid_t pid = 0; char line[MAX_LEN] = {0}; int n = 0; /*创建管道，需要传入两个文件描述符*/ if(pipe(fd) &amp;lt; 0) { perror(&amp;#34;create pipe failed\n&amp;#34;); return -1; } /*fork子进程*/ if((pid = fork()) &amp;lt; 0) { perror(&amp;#34;fork failed\n&amp;#34;); return -1; } /*父进程*/ else if(pid &amp;gt; 0) { /*关闭管道的写描述符*/ close(fd[1]); /*从管道读取数据*/ n = read(fd[0],line,MAX_LEN); printf(&amp;#34;read %d bytes from pipe :%s\n&amp;#34;,n,line); } /*子进程*/ else { /*关闭管道的读描述符*/ close(fd[0]); /*向管道写入数据*/ write(fd[1],&amp;#34;www.</description>
    </item>
    
  </channel>
</rss>
