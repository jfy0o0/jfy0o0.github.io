<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux Soft on Jiang . &#39;s blog</title>
    <link>https://jfy0o0.github.io/tags/linux-soft/</link>
    <description>Recent content in Linux Soft on Jiang . &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 May 2021 15:32:33 +0800</lastBuildDate><atom:link href="https://jfy0o0.github.io/tags/linux-soft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Soft - tcpdump、tcpreplay</title>
      <link>https://jfy0o0.github.io/2021/linux-%E8%BD%AF%E4%BB%B6-tcpdumptcpreplay/</link>
      <pubDate>Thu, 06 May 2021 15:32:33 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/linux-%E8%BD%AF%E4%BB%B6-tcpdumptcpreplay/</guid>
      <description>tcpdump  根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。 它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。  tcpdump [-adeflnNOpqStvx][-c&amp;lt;数据包数目&amp;gt;][-dd][-ddd][-F&amp;lt;表达文件&amp;gt;][-i&amp;lt;网络界面&amp;gt;][-r&amp;lt;数据包文件&amp;gt;][-s&amp;lt;数据包大小&amp;gt;][-tt][-T&amp;lt;数据包类型&amp;gt;][-vv][-w&amp;lt;数据包文件&amp;gt;][输出数据栏位] 参数说明： -a 尝试将网络和广播地址转换成名称。 -c&amp;lt;数据包数目&amp;gt; 收到指定的数据包数目后，就停止进行倾倒操作。 -d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。 -dd 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。 -ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。 -e 在每列倾倒资料上显示连接层级的文件头。 -f 用数字显示网际网络地址。 -F&amp;lt;表达文件&amp;gt; 指定内含表达方式的文件。 -i&amp;lt;网络界面&amp;gt; 使用指定的网络截面送出数据包。 -l 使用标准输出列的缓冲区。 -n 不把主机的网络地址转换成名字。 -N 不列出域名。 -O 不将数据包编码最佳化。 -p 不让网络界面进入混杂模式。 -q 快速输出，仅列出少数的传输协议信息。 -r&amp;lt;数据包文件&amp;gt; 从指定的文件读取数据包数据。 -s&amp;lt;数据包大小&amp;gt; 设置每个数据包的大小。 -S 用绝对而非相对数值列出TCP关联数。 -t 在每列倾倒资料上不显示时间戳记。 -tt 在每列倾倒资料上显示未经格式化的时间戳记。 -T&amp;lt;数据包类型&amp;gt; 强制将表达方式所指定的数据包转译成设置的数据包类型。 -v 详细显示指令执行过程。 -vv 更详细显示指令执行过程。 -x 用十六进制字码列出数据包资料。 -w&amp;lt;数据包文件&amp;gt; 把数据包数据写入指定的文件。 监视指定主机和端口的数据包
如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令
tcpdump tcp port 23 and host 210.27.48.1 对本机的udp 123 端口进行监视 123 为ntp的服务端口</description>
    </item>
    
    <item>
      <title>Linux Soft - valgrind</title>
      <link>https://jfy0o0.github.io/2021/linux-%E8%BD%AF%E4%BB%B6-valgrind/</link>
      <pubDate>Fri, 22 Jan 2021 08:51:12 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2021/linux-%E8%BD%AF%E4%BB%B6-valgrind/</guid>
      <description>valgrind  Valgrind是一个GPL的软件，用于Linux（For x86, amd64 and ppc32）程序的内存调试和代码剖析。 你可以在它的环境中运行你的程序来监视内存的使用情况，比如C 语言中的malloc和free或者 C++中的new和 delete。 使用Valgrind的工具包，你可以自动的检测许多内存管理和线程的bug，避免花费太多的时间在bug寻找上，使得你的程序更加稳固。  功能 Valgrind工具包包含多个工具，如Memcheck,Cachegrind,Helgrind, Callgrind，Massif
下面分别介绍个工具的作用
Memcheck  使用未初始化的内存 (Use of uninitialised memory) 使用已经释放了的内存 (Reading/writing memory after it has been free’d) 使用超过 malloc分配的内存空间(Reading/writing off the end of malloc’d blocks) 对堆栈的非法访问 (Reading/writing inappropriate areas on the stack) 申请的空间是否有释放 (Memory leaks – where pointers to malloc’d blocks are lost forever) malloc/free/new/delete申请和释放内存的匹配(Mismatched use of malloc/new/new [] vs free/delete/delete []) src和dst的重叠(Overlapping src and dst pointers in memcpy() and related functions)  Callgrind  Callgrind收集程序运行时的一些数据，函数调用关系等信息，还可以有选择地进行cache模拟。 在运行结束时，它会把分析数据写入一个文件。callgrind_annotate可以把这个文件的内容转化成可读的形式。  Cachegrind  它模拟 CPU中的一级缓存I1,D1和L2二级缓存，能够精确地指出程序中 cache的丢失和命中。 如果需要，它还能够为我们提供cache丢失次数，内存引用次数，以及每行代码，每个函数，每个模块，整个程序产生的指令数。这对优化程序有很大的帮助。  Helgrind  它主要用来检查多线程程序中出现的竞争问题。 Helgrind寻找内存中被多个线程访问，而又没有一贯加锁的区域，这些区域往往是线程之间失去同步的地方，而且会导致难以发掘的错误。 Helgrind实现了名为” Eraser” 的竞争检测算法，并做了进一步改进，减少了报告错误的次数。  Massif  堆栈分析器，它能测量程序在堆栈中使用了多少内存，告诉我们堆块，堆管理块和栈的大小。 Massif能帮助我们减少内存的使用，在带有虚拟内存的现代系统中，它还能够加速我们程序的运行，减少程序停留在交换区中的几率。  应用 1、检查内存错误： 如果我们想用valgrind的内存检测工具，我们就要用如下方法调用：</description>
    </item>
    
    <item>
      <title>Linux Soft - gdb</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-gdb/</link>
      <pubDate>Mon, 14 Dec 2020 19:08:28 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-gdb/</guid>
      <description>gdb GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。 对于一名Linux下工作的c/c++程序员，gdb是必不可少的工具；
启动 gdb test gdb -q test //表示不打印gdb版本信息，界面较为干净； 运行命令    命令 缩写 说明     run r 运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。   continue c 继续执行，到下一个断点处（或运行结束）   next n 单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。   step s 单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的   until  当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。   until + line num  运行至某行，不仅仅用来跳出循环   finish  运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。   call  调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)   quit q 简记为 q ，退出gdb    设置断点    命令 缩写 说明     break n b n 在第n行处设置断点   b fn1 if a&amp;gt;b  条件断点设置   break func b 在函数func()的入口处设置断点，如：break cb_button   delete 断点号n  删除第n个断点   disable 断点号n  暂停第n个断点   enable 断点号n  开启第n个断点   clear 行号n  清除第n行的断点   info b  显示当前程序的断点设置情况   delete breakpoints  清除所有断点    查看源码    命令 缩写 说明     list l 列出程序的源代码，默认每次显示10行。   list line num  将显示当前文件以“行号”为中心的前后10行代码，如：list 12   list func  将显示“函数名”所在函数的源代码，如：list main   list  不带参数，将接着上一次 list 命令的，输出下边的内容。    打印表达式    命令 缩写 说明     print 表达式 p 其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。   print a  将显示整数 a 的值   print ++a  将把 a 中的值加1,并显示出来   p /x a  将显示整数 a 的十六进制值   p *array@3  将显示数组 array 的长度为3的值   print name  将显示字符串 name 的值   print gdb_test(22)  将以整数22作为参数调用 gdb_test() 函数   print gdb_test(a)  将以变量 a 作为参数调用 gdb_test() 函数   display 表达式  在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a   watch 表达式  设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a   whatis  查询变量或函数   info function  查询函数   info locals  显示当前堆栈页的所有变量    查看运行信息    命令 缩写 说明     where/bt  当前运行的堆栈列表；   backtrace bt 显示当前调用堆栈   up/down  改变堆栈显示的深度   set args  参数:指定运行时的参数   show args  查看设置好的参数   info program  来查看程序的是否在运行，进程号，被暂停的原因。    分割窗口    命令 缩写 说明     layout  用于分割窗口，可以一边查看代码，一边测试：   layout src  显示源代码窗口   layout asm  显示反汇编窗口   layout regs  显示源代码/反汇编和CPU寄存器窗口   layout split  显示源代码和反汇编窗口   Ctrl + L  刷新窗口    多线程    命令 缩写 说明     bt  看函数调用栈的所有信息，当程序执行异常时，可通过此命令查看程序的调用过程；   info threads  显示当前进程中的线程；   thread id  切换到具体的线程id，一般切换到具体的线程后再执行bt等操作。    attach  通过命令：$ ps -aux | grep main ,获取执行main的进程(pid)，例如执行main的进程为18786： 执行：$ gdb attach 18786，  gdb强行生成core文件  generate-core-file  core文件生成 ulimit</description>
    </item>
    
    <item>
      <title>Linux Soft - iptables</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-iptables/</link>
      <pubDate>Tue, 10 Nov 2020 14:18:28 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-iptables/</guid>
      <description>iptables iptables 是用来设置、维护和检查Linux内核]的IP包过滤规则的。
 可以定义不同的表，每个表都包含几个内部的链，也能包含用户定义的链。 每个链都是一个规则列表，对对应的包进行匹配：每条规则指定应当如何处理与之相匹配的包。 这被称作&amp;rsquo;target&#39;（目标），也可以跳向同一个表内的用户定义的链。  表  filter表：负责过滤功能，防火墙；内核模块：iptables_filter nat表：network address translation，网络地址转换功能；内核模块：iptable_nat mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle raw表：关闭nat表上启用的连接追踪机制；iptable_raw  流程 链的规则存放于哪些表中（从链到表的对应关系）：
  PREROUTING 的规则可以存在于：raw表，mangle表，nat表。
  INPUT 的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。
  FORWARD 的规则可以存在于：mangle表，filter表。
  OUTPUT 的规则可以存在于：raw表mangle表，nat表，filter表。
  POSTROUTING 的规则可以存在于：mangle表，nat表。
  表中的规则可以被哪些链使用（从表到链的对应关系）：
  raw 表中的规则可以被哪些链使用：PREROUTING，OUTPUT
  mangle 表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING
  nat 表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）
  filter 表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT
  处理动作  ACCEPT:允许数据包通过 DROP:直接丢弃数据包 REJECT:拒绝数据包通过 SNAT:源地址转换 MASQUERADE:SNAT的特殊形式，适用于动态的、临时会变的ip上 DNAT:目标地址转发 REDIRECT:在本机做端口映射 LOG:/var/log/messages记录日志信息，将数据包传递给下一条规则，除了记录以外，不操作  命令 iptables -t 表名 -L 查看对应表的所有规则，-t选项指定要操作的表，省略&amp;#34;-t 表名&amp;#34;时，默认表示操作filter表，-L表示列出规则，即查看规则。 iptables -t 表名 -L 链名 查看指定表的指定链中的规则。 iptables -t 表名 -v -L 查看指定表的所有规则，并且显示更详细的信息（更多字段），-v表示verbose，表示详细的，冗长的，当使用-v选项时，会显示出&amp;#34;计数器&amp;#34;的信息，由于上例中使用的选项都是短选项，所以一般简写为iptables -t 表名 -vL iptables -t 表名 -n -L 表示查看表的所有规则，并且在显示规则时，不对规则中的IP或者端口进行名称反解，-n选项表示不解析IP地址。 iptables --line-numbers -t 表名 -L 表示查看表的所有规则，并且显示规则的序号，--line-numbers选项表示显示规则的序号，注意，此选项为长选项，不能与其他短选项合并，不过此选项可以简写为--line，注意，简写后仍然是两条横杠，仍然是长选项。 iptables -t 表名 -v -x -L 表示查看表中的所有规则，并且显示更详细的信息(-v选项)，不过，计数器中的信息显示为精确的计数值，而不是显示为经过可读优化的计数值，-x选项表示显示计数器的精确值。 iptables --line -t filter -nvxL iptables --line -t filter -nvxL INPUT 增删改查 在指定表的指定链的尾部添加一条规则，-A选项表示在对应链的末尾添加规则，省略-t选项时，表示默认操作filter表中的规则 命令语法：iptables -t 表名 -A 链名 匹配条件 -j 动作 示例：iptables -t filter -A INPUT -s 192.</description>
    </item>
    
    <item>
      <title>Linux Soft - rsync</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-rsync/</link>
      <pubDate>Mon, 09 Nov 2020 11:20:43 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-rsync/</guid>
      <description>rsync 用处： Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件，也可以使用 Rsync 同步本地硬盘中的不同目录。
 在使用 rsync 进行远程同步时，可以使用两种方式：  远程 Shell方式（建议使用 ssh，用户验证由 ssh 负责） C/S 方式（即客户连接远程 rsync 服务器，用户验证由 rsync 服务器负责）。   rsync 被称为是一个文件同步的快速方法，主要是因为其在同步文件时会检查文件之间是否有差异，它只同步存在差异或者不存在的文件，但是首次同步时速度依然很慢。  参数： rsync有许多选项： -n: 在不确定命令是否能按意愿执行时，务必要事先测试；-n可以完成此功能； -v: --verbose，详细输出模式 -q: --quiet，静默模式 -c: --checksum，开启校验功能，强制对文件传输进行校验 -r: --recursive，递归复制； -a: --archives，归档，保留文件的原有属性,等同于&amp;#34;-rtopgDl&amp;#34;。 -p: --perms 保留文件的权限 -t: --times 保留文件的时间戳 -l: --links 保留文件的符号链接 -g: --group 保留文件的属组 -o: --owner 保留文件的属主 -D： --devices 保留设备文件 -H, --hard-links 保留硬链结; -S, --sparse 对稀疏文件进行特殊处理以节省DST的 空间; -e ssh: 表示使用ssh协议作承载 -z: 对文件压缩后传输 --progress：显示进度条 --stats: 显示如何执行压缩和传输 --delete：删除那些DST中有而SRC没有的文件，即删除DST中多余的文件； --delete-excluded 同样删除接收端那些被该选项指定排除的文件。 --delete-after 传输结束以后再删除。 --ignore-errors 及时出现IO错误也进行删除。 --max-delete=NUM 最多删除NUM个文件。 --partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。 --force 强制删除目录，即使不为空。 --numeric-ids 不将数字的用户和组id匹配为用户名和组名。 --timeout=time ip超时时间，单位为秒。 -I, --ignore-times 不跳过那些有同样的时间和长度的文件。 --size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。 --modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。 -T --temp-dir=DIR 在DIR中创建临时文件。 --exclude=PATTERN 指定排除不需要传输的文件模式。 --include=PATTERN 指定不排除而需要传输的文件模式。 --exclude-from=FILE 排除FILE中指定模式的文件。 --include-from=FILE 不排除FILE指定模式匹配的文件。 --version 打印版本信息。 --address 绑定到特定的地址。 --config=FILE 指定其他的配置文件，不使用默认的rsyncd.</description>
    </item>
    
    <item>
      <title>Linux Soft - vsftpd</title>
      <link>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-vsftpd/</link>
      <pubDate>Mon, 09 Nov 2020 11:07:56 +0800</pubDate>
      
      <guid>https://jfy0o0.github.io/2020/linux-%E8%BD%AF%E4%BB%B6-vsftpd/</guid>
      <description>vsftpd 服务：  启动ftp命令#service vsftpd start 停止ftp命令#service vsftpd stop 重启ftp命令#service vsftpd restart  配置文件： ftp的配置文件主要有三个，位于**/etc/vsftpd/**目录下，分别是：
 ftpusers 该文件用来指定那些用户不能访问ftp服务器。 user_list 该文件用来指示的默认账户在默认情况下也不能访问ftp  是和vsftpd.conf中的userlist_enable和userlist_deny两个配置项紧密相关的，它可以有效，也可以无效，有效时它可以是一个黑名单，也可以是一个白名单！ 当userlist_enable=YES时，userlist_deny=YES时：user_list是一个黑名单，即：所有出现在名单中的用户都会被拒绝登入； 当userlist_enable=YES时，userlist_deny=NO时：user_list是一个白名单，即：只有出现在名单中的用户才会被准许登入(user_list之外的用户都被拒绝登入)；另外需要特别提醒的是：使用白名单后，匿名用户将无法登入！除非显式在user_list中加入一行：anonymous   vsftpd.conf vsftpd的主配置文件  匿名用户操作：   切换目录cd /etc/vsftpd/
  修改vsftpd.conf文件vi vsftpd.conf
  去掉以下两行前面的’#&amp;lsquo;号
anon_upload_enable=YES anon_mkdir_write_enable=YES   非匿名用户操作： 修改vsftpd默认根目录： 如何修改 vsftpd 的默认根目录 /var/ftp/ 到另一个目录?
  默认配置下，匿名用户登录 vsftpd 服务后的根目录是 /var/ftp/；
  系统用户登录 vsftpd 服务后的根目录是系统用户的家目录。
  若要修改登录 vsftpd 服务后的根目录，只要修改 /etc/vsftpd/vsftpd.conf 文件即可。</description>
    </item>
    
  </channel>
</rss>
